function fusc(n: int): int

method ComputeFusc(N: int) returns (b: int)
    requires N >= 0
    ensures b == fusc(N)
{
    proof N >= 0; // 1.1
    proof fusc(N) == 1 * fusc(N) + 0 * fusc(N + 1) && N >= 0; // 1.2
    b := 0;
    proof fusc(N) == 1 * fusc(N) + b * fusc(N + 1) && N >= 0; // 2.1
    proof forall n: int, a: int :: fusc(N) == 1 * fusc(N) + b * fusc(N + 1) && N >= 0; // 2.2
    var n, a := N, 1;
    proof fusc(N) == a * fusc(n) + b * fusc(n + 1) && n >= 0; // 3.1
    while n != 0
        invariant fusc(N) == a * fusc(n) + b * fusc(n + 1)
        invariant n >= 0
        decreases n 
    {
        proof n != 0 && fusc(N) == a * fusc(n) + b * fusc(n + 1) && n >= 0; // 4.1
        proof fusc(N) == a * fusc(n) + b * fusc(n + 1) && n > 0; // 4.2
        proof forall d: int :: fusc(N) == a * fusc(n) + b * fusc(n + 1) && n > 0; // 4.3
        proof forall d: int :: (n % 2 == 0 ==> fusc(N) == a * fusc(n) + b * fusc(n + 1) && n > 0) &&
                (n % 2 != 0 ==> fusc(N) == a * fusc(n) + b * fusc(n + 1) && n > 0); // 4.4
        ghost var d := n; 
        proof (n % 2 == 0 ==> fusc(N) == a * fusc(n) + b * fusc(n + 1) && d > n / 2 >= 0) &&
                (n % 2 != 0 ==> fusc(N) == a * fusc(n) + b * fusc(n + 1) && d > (n - 1) / 2 >= 0); // 5.1
        if n % 2 == 0 {
            proof fusc(N) == a * fusc(n) + b * fusc(n + 1) && d > n / 2 >= 0; // 6.1
            proof fusc(N) == a * fusc(2 * n / 2) + //rule (iii)
                b * fusc( 2 * n / 2 + 1) && //rule (iv) 5
                d > n / 2 >= 0; // 6.2
            proof fusc(N) == a * fusc(n / 2) + b * (fusc(n / 2) + fusc(n / 2 + 1)); // 6.3
            proof fusc(N) == (a + b) * fusc(n / 2) + b * fusc(n / 2 + 1) && d > n / 2 >= 0; // 6.4
            a := a + b;
            proof fusc(N) == a * fusc(n / 2) + b * fusc(n / 2 + 1) && d > n / 2 >= 0; // 7.1
            n := n / 2;
            proof fusc(N) == a * fusc(n) + b * fusc(n + 1) && d > n >= 0; // 8.1
        } else {
                proof fusc(N) == a * fusc(n) + b * fusc(n + 1) && d > (n - 1) / 2 >= 0; // 9.1
                proof fusc(N) == a * fusc(2 * (n - 1) / 2 + 1) + //rule (iv) 8
                    b * fusc(2 * (n + 1) / 2) && //rule (iii) 9
                    d > (n - 1) / 2 >= 0; // 9.2
                proof fusc(N) == a * (fusc((n - 1) / 2) + fusc((n - 1) / 2 + 1)) + b * fusc((n + 1) / 2) &&
                    d > (n - 1) / 2 >= 0; // 9.3     
                proof fusc(N) == a * fusc((n - 1) / 2) + a * fusc((n - 1) / 2 + 1) + b * fusc((n + 1) / 2) &&
                    d > (n - 1) / 2 >= 0; // 9.4
                proof fusc(N) == a * fusc((n - 1) / 2) + a * fusc((n - 1) / 2 + 1) + b * fusc((n - 1 + 2) / 2) &&
                    d > (n - 1) / 2 >= 0; // 9.5
                proof fusc(N) == a * fusc((n - 1) / 2) + a * fusc((n - 1) / 2 + 1) + b * fusc((n - 1) / 2 + 2/2) &&
                    d > (n - 1) / 2 >= 0; // 9.6
                proof fusc(N) == a * fusc((n - 1) / 2) + (b + a) * fusc((n - 1) / 2 + 1) && 
                    d > (n - 1) / 2 >= 0; // 9.7
            b := b + a; 
            proof fusc(N) == a * fusc((n - 1) / 2) + b * fusc((n - 1) / 2 + 1) &&
                d > (n - 1) / 2 >= 0; // 10.1
            n := (n - 1) / 2; 
            proof fusc(N) == a * fusc(n) + b * fusc(n + 1) && d > n >= 0; // 11.1
        }
        proof fusc(N) == a * fusc(n) + b * fusc(n + 1) && d > n >= 0; // 12.1
        proof fusc(N) == a * fusc(n) + b * fusc(n + 1) && n >= 0 && d > n && d >= 0; // 12.2
    }
    proof n == 0 && fusc(N) == a * fusc(n) + b * fusc(n + 1) && n >= 0; // 13.1 strengthening (by introducing n == 0), rules (i) and (ii)
    proof b == fusc(N); // 13.2
}