// This proves whether the students wp proof is correct

function gcd(a:int, b:int): int

lemma gcd1(a:int, b:int)
    ensures gcd(a, 0) == 0

lemma gcd2(a:int, b:int)
    ensures gcd(a, a) == a

lemma gcd3(a:int, b:int)
    ensures gcd(a, b) == gcd(b, a)

lemma gcd4(a:int, b:int)
    ensures b > 0 ==> gcd(a, b) == gcd(b, a % b)

method GCD2(a: int, b: int) returns (r: int)
    requires a >= 0 && b >= 0
    ensures r == gcd(a, b)
    decreases b
{
    gcd1(a, b);
    gcd2(a, b);
    gcd3(a, b);
    gcd4(a, b);
    calc == {
        (b == 0 ==> a == gcd(a, b)) &&
            (b != 0 ==> b >= 0 && a % b >= 0 && gcd(b, a % b) == gcd(a, b));
        (b == 0 ==> a == gcd(a, b)) && 
            (b != 0 ==> b >= 0 && a % b >= 0 && gcd(b, a % b) == gcd(a, b));
    }
    if b == 0 {
        calc == {
            a == gcd(a, b);
            a == gcd(a, b);
        }
        r := a;
        calc == {
            r == gcd(a, b);
            r == gcd(a, b);
        }
    } else {
        calc == {
            b >= 0 && a % b >= 0 && gcd(b, a % b) == gcd(a, b); //one-point rule
            b >= 0 && a % b >= 0 && forall r' :: r' == gcd(b, a % b) ==> r' == gcd(a, b);
            b >= 0 && a % b >= 0 && forall r' :: r' == gcd(b, a % b) ==> r' == gcd(a, b);
        }
        r := GCD2(b, a % b);
        calc == {
            r == gcd(a, b);
            r == gcd(a, b);
        }
    }
    calc == {
        r == gcd(a, b);
        r == gcd(a, b);
    }
    assume r == gcd(a, b);
}