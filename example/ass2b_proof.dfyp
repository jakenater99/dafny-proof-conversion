function fusc(n: int): int

lemma fusc1()
    ensures fusc(0) == 0

lemma fusc2()
    ensures fusc(1) == 1

lemma fusc3(n: int)
    ensures fusc(2 * n) == fusc(n)

lemma fusc4(n: int)
    ensures fusc(2 * n + 1) == fusc(n) + fusc(n + 1)

method ComputeFusc(N: int) returns (b: int)
    requires N >= 0
    ensures b == fusc(N)

method ComputePos(num: int, den: int) returns (n: int)
    requires num > 0 && den > 0
    ensures n > 0 && num == fusc(n) && den == fusc(n+1)
    decreases *
{
    fusc2();
    fusc3(1);
    calc == {
        true; //rules (ii) and (iii)
        1 > 0 && 1 == fusc(1) && 1 == fusc(2);
    }
    n := 1;
    calc == {
        n > 0 && 1 == fusc(n) && 1 == fusc(n + 1);
        forall a: int, b: int :: n > 0 && 1 == fusc(n) && 1 == fusc(n + 1);
    }
    var a, b := 1, 1; 
    calc == {
        n > 0 && a == fusc(n) && b == fusc(n + 1);
    }
    while (a != num || b != den)
        invariant n > 0 && a == fusc(n) && b == fusc(n + 1) 
        decreases *
    {
        calc == {
            n > 0 && (a != num || b != den) && a == fusc(n) && b == fusc(n + 1); //strengthening 3
            ==>
            n + 1 > 0 && b == fusc(n + 1);
        }
        a := b; 
        calc == {
            n + 1 > 0 && a == fusc(n + 1); //one-point rule 5
            n + 2 > 0 &&
                forall b' :: b' == fusc(n + 2) ==> n + 1 > 0 && a == fusc(n + 1) && b' == fusc(n + 2);
        }
        b := ComputeFusc(n + 2); 
        calc == {
            n + 1 > 0 && a == fusc(n + 1) && b == fusc(n + 2);
        }
        n := n + 1;
        calc == {
            n > 0 && a == fusc(n) && b == fusc(n + 1);
        }
    }
    calc == {
        n > 0 && a == num && b == den && a == fusc(n) && b == fusc(n + 1); //strengthening (by introducing a == num && b == den) 8
        ==>
        n > 0 && num == fusc(n) && den == fusc(n + 1);
    }
}