method mult(x: int, y: int) returns (r: int)
    requires x >=0 && y >= 0
    ensures r == x * y
    decreases y, x
{
    proof x >= 0 && y >= 0;
    // since x >= y && y >= 0 implies x >= 0, and again using the law
    // (A && B) || (A && C) <==> (A && (B || C))
    proof (x >= y && y >= 0) || (x >= 0 && y >= 0 && x < y) || (x >= 0 && y >= 0);
    // using the law, (A && B) || (A && C) <==> (A && (B || C)), twice
    proof false || (x >= y && y == 0) || (x >=y && y >0) ||
        (x >= 0 && y >= 0 && x < y) || (x >= 0 && y ==0) || (x >= 0 && y > 0);
    proof (x >= y && x < y) || (x >= y && y == 0) || (x >=y && y >0) ||
        (x >= 0 && y >= 0 && x < y) || (x >= 0 && y >= 0 && y ==0) ||
        (x >= 0 && y >= 0 && y > 0);
    proof (x >= y || (x >= 0 && y >= 0)) && (x < y || y == 0 || (x >= 0 && y > 0));
    proof (x < y ==> x >= 0 && y >= 0 ) && (x >= y ==> y == 0 || (x >= 0 && y > 0));
    if x < y {
        proof x >= 0 && y >= 0;
        proof y >= 0 && x >= 0 && forall r' :: r' == y * x ==> r' == x * y;
        r := mult(y, x);
        proof r == x * y;
        proof y == 0 || (x >= 0 && y > 0);
        proof (y != 0 ==> x >= 0 && y > 0) && (y == 0 ==> x * y == 0);
    } else if y !=0 {
        proof x >= 0 && y > 0;
        proof x >= 0 && y-1 >= 0 && x * (y-1) + x == x * y;
        proof x >= 0 && y-1 >= 0 && forall r' :: r' == x * (y-1) ==> r' + x == x * y;
        r := mult(x, y-1);
        proof r + x == x * y;
        r := r + x;
        proof r == x * y;
    } else {
        proof x * y == 0;
        r := 0;
        proof r == x * y;
    }
    proof r == x * y;
}