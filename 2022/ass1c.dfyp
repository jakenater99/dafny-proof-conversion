method ExpE(a: int, n: nat) returns (z: int) 
{
    proof true;
    proof 1 * an == an;
    z := 1;
    proof z * an == an;
    var i, b := n, a;
    proof z * bi == an;
    while (i != 0)
        invariant z * bi == an
    {
        proof z * bi == an && i != 0; //(strengthening)
        proof z * bi == an; //(A.16, A.28)
        proof i% 2 == 0 || i%2 != 0 ==> z * bi == an; //(A.34)
        proof (i%2 != 0 ==> z * bi == an) && //(i is of type nat)
            (i%2 == 0 ==> z * bi == an);
        proof (i%2 != 0 ==> z * bi == an && i - 1 >= 0) &&
            (i%2 == 0 ==> z * bi == an);
        if i % 2 != 0 {
            proof z * bi == an && i - 1 >= 0; //(bx*by == bx+y)
            proof z * b * bi-1 == an && i - 1 >= 0;
            z, i := z * b, i - 1;
            proof z * bi == an && i >= 0; //(i is of type nat)
            proof z * bi == an;
        } else {
            proof z * bi == an; //(b*b == b2 and (bx)y == bx*y)
            proof z * (b*b)*i/2 == an;
            b, i := b * b, i / 2;
            proof z * bi == an;
        }
    }
    proof z * bi == an && i == 0; //(strengthening)
    proof z == an;
}